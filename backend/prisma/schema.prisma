generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  name            String
  email           String
  password        String
  status          String?

  senderMessages Message[] @relation("sender")
  recipientMessages Message[] @relation("recipient")
  tokens UserToken[]
  friends Friend[] @relation("friend")
  users Friend[] @relation("user")
  requesters RequestToBeAFriend[] @relation("requester")
  requesteds RequestToBeAFriend[] @relation("requested")

  @@map("users")
}

model RequestToBeAFriend {
  id                String @id @default(uuid())
  requester_id      String
  requested_id      String
  created_at        DateTime @default(now())
  confirmation_date DateTime?

  requester User @relation("requester", fields: [requester_id], references: [id])
  requested User @relation("requested", fields: [requested_id], references: [id])

  @@map("requests_to_be_a_friend")
}

model Friend {
  id              String @id @default(uuid())
  user_id         String
  friend_id       String

  user User @relation("user", fields: [user_id], references: [id])
  friend User @relation("friend", fields: [friend_id], references: [id])

  @@map("friends")
}

model UserToken {
  id            String @id @default(uuid())
  refresh_token String
  user_id       String
  expires_date  DateTime
  created_at    DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])

  @@map("users_tokens")
}

model Message {
  id              String @id @default(uuid())
  text            String
  createdAt       DateTime @default(now())
  sender_id       String
  recipient_id    String

  sender User @relation("sender", fields: [sender_id], references: [id])
  recipient User @relation("recipient", fields: [recipient_id], references: [id])

  @@map("messages")
}
